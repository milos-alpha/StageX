src/pages/Applications/MyApplications.jsx
jsx
Copy
Edit
import { useState, useEffect } from 'react';
import api from '../../../services/api';
import LoadingSpinner from '../../components/ui/LoadingSpinner';
import { Link } from 'react-router-dom';

const MyApplications = () => {
  const [applications, setApplications] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);

  useEffect(() => {
    const fetchApplications = async () => {
      try {
        const res = await api.get('/applications');
        setApplications(res.data.data);
      } catch (err) {
        setError(err.response?.data?.error || 'Failed to fetch applications');
      } finally {
        setLoading(false);
      }
    };

    fetchApplications();
  }, []);

  if (loading) return <LoadingSpinner />;
  if (error) return <div className="text-red-600">{error}</div>;

  return (
    <div className="container mx-auto py-10 px-4">
      <h1 className="text-2xl font-bold text-gray-800 mb-6">My Applications</h1>
      {applications.length === 0 ? (
        <p className="text-gray-600">You haven't applied to any jobs yet.</p>
      ) : (
        <div className="grid gap-6">
          {applications.map(app => (
            <div key={app._id} className="bg-white p-6 shadow rounded-md">
              <h2 className="text-lg font-semibold text-primary-700">
                {app.job?.title || 'Job Title'}
              </h2>
              <p className="text-sm text-gray-600">Status: <strong>{app.status}</strong></p>
              <p className="text-sm text-gray-500 mt-1">{app.coverLetter}</p>
              <Link
                to={`/jobs/${app.job?._id}`}
                className="text-sm text-primary-600 mt-2 inline-block"
              >
                View Job
              </Link>
            </div>
          ))}
        </div>
      )}
    </div>
  );
};

export default MyApplications;
✅ 2. src/pages/Jobs/JobDetails.jsx
jsx
Copy
Edit
import { useEffect, useState } from 'react';
import { useParams, Link } from 'react-router-dom';
import api from '../../../services/api';
import LoadingSpinner from '../../components/ui/LoadingSpinner';
import { useAuth } from '../../../context/AuthContext';

const JobDetails = () => {
  const { id } = useParams();
  const [job, setJob] = useState(null);
  const [loading, setLoading] = useState(true);
  const { user } = useAuth();

  useEffect(() => {
    const fetchJob = async () => {
      try {
        const res = await api.get(`/jobs/${id}`);
        setJob(res.data.data);
      } catch (err) {
        console.error(err);
      } finally {
        setLoading(false);
      }
    };
    fetchJob();
  }, [id]);

  if (loading) return <LoadingSpinner />;
  if (!job) return <div className="text-red-600">Job not found.</div>;

  return (
    <div className="container mx-auto py-10 px-4">
      <h1 className="text-3xl font-bold text-gray-800 mb-2">{job.title}</h1>
      <p className="text-sm text-gray-600 mb-4">{job.location} • {job.type}</p>
      <div className="mb-6">
        <h2 className="font-semibold text-lg text-gray-700">Description</h2>
        <p className="text-gray-600">{job.description}</p>
      </div>
      <div className="mb-6">
        <h2 className="font-semibold text-lg text-gray-700">Requirements</h2>
        <ul className="list-disc list-inside text-gray-600">
          {job.requirements?.map((req, idx) => <li key={idx}>{req}</li>)}
        </ul>
      </div>
      {user?.role === 'student' && (
        <Link to={`/jobs/${id}/apply`} className="bg-primary-600 hover:bg-primary-700 text-white px-4 py-2 rounded-md">
          Apply Now
        </Link>
      )}
    </div>
  );
};

export default JobDetails;
✅ 3. src/pages/Jobs/PostJob.jsx
jsx
Copy
Edit
import { useState } from 'react';
import { useNavigate } from 'react-router-dom';
import api from '../../../services/api';

const PostJob = () => {
  const [formData, setFormData] = useState({
    title: '',
    description: '',
    type: 'internship',
    location: '',
    salary: '',
    deadline: '',
    skills: '',
    requirements: ''
  });

  const navigate = useNavigate();
  const [error, setError] = useState(null);

  const handleChange = e => {
    setFormData(prev => ({ ...prev, [e.target.name]: e.target.value }));
  };

  const handleSubmit = async e => {
    e.preventDefault();
    try {
      const payload = {
        ...formData,
        skills: formData.skills.split(',').map(skill => skill.trim()),
        requirements: formData.requirements.split(',').map(req => req.trim()),
      };
      await api.post('/jobs', payload);
      navigate('/jobs');
    } catch (err) {
      setError(err.response?.data?.error || 'Job posting failed');
    }
  };

  return (
    <div className="max-w-3xl mx-auto bg-white p-8 rounded shadow mt-8">
      <h1 className="text-2xl font-bold mb-6 text-gray-800">Post a New Job</h1>
      {error && <div className="text-red-600 mb-4">{error}</div>}
      <form onSubmit={handleSubmit} className="space-y-4">
        <input type="text" name="title" placeholder="Job Title" onChange={handleChange} className="w-full border p-2 rounded" required />
        <textarea name="description" placeholder="Job Description" rows={4} onChange={handleChange} className="w-full border p-2 rounded" required />
        <input type="text" name="location" placeholder="Location" onChange={handleChange} className="w-full border p-2 rounded" required />
        <input type="number" name="salary" placeholder="Salary" onChange={handleChange} className="w-full border p-2 rounded" />
        <input type="date" name="deadline" onChange={handleChange} className="w-full border p-2 rounded" required />
        <select name="type" onChange={handleChange} className="w-full border p-2 rounded">
          <option value="internship">Internship</option>
          <option value="full-time">Full Time</option>
          <option value="part-time">Part Time</option>
          <option value="remote">Remote</option>
          <option value="contract">Contract</option>
        </select>
        <input type="text" name="skills" placeholder="Skills (comma separated)" onChange={handleChange} className="w-full border p-2 rounded" />
        <input type="text" name="requirements" placeholder="Requirements (comma separated)" onChange={handleChange} className="w-full border p-2 rounded" />
        <button type="submit" className="bg-primary-600 text-white px-6 py-2 rounded hover:bg-primary-700">
          Post Job
        </button>
      </form>
    </div>
  );
};

export default PostJob;